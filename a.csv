########################## 
# quadkey
#########################
def quadkeyexpand(quadkey_layer: QgsVectorLayer, resolution: int,quadkeyID_field=None, feedback=None) -> QgsVectorLayer:
    if not quadkeyID_field:
        quadkeyID_field = 'quadkey'

    fields = QgsFields()
    fields.append(QgsField("quadkey", QVariant.String))
    fields.append(QgsField("resolution", QVariant.Int))
    fields.append(QgsField("center_lat", QVariant.Double))
    fields.append(QgsField("center_lon", QVariant.Double))
    fields.append(QgsField("cell_width", QVariant.Double))
    fields.append(QgsField("cell_height", QVariant.Double))
    fields.append(QgsField("cell_area", QVariant.Double))

    crs = quadkey_layer.crs().toWkt()
    mem_layer = QgsVectorLayer("Polygon?crs=" + crs, "quadkey_expanded", "memory")
    mem_provider = mem_layer.dataProvider()
    mem_provider.addAttributes(fields)
    mem_layer.updateFields()

    quadkey_ids = [
        feature[quadkeyID_field]
        for feature in quadkey_layer.getFeatures()
        if feature[quadkeyID_field]
    ]
    
    if quadkey_ids:
        try:
            max_res = max(len(quadkey_id) for quadkey_id in quadkey_ids)
            if resolution <= max_res:
                if feedback:
                    feedback.reportError(f"Target expand resolution ({resolution}) must > {max_res}.")
                    return None
            quadkey_ids_expand = quadkey_expand(quadkey_ids, resolution)
        except:
            raise QgsProcessingException("Expand cells failed. Please check your quadkey cell Ids.")
            
        total = len(quadkey_ids_expand)

        for i, quadkey_id_expand in enumerate(quadkey_ids_expand):
            if feedback:
                feedback.setProgress(int((i / total) * 100))
                if feedback.isCanceled():
                    return None

            match = re.match(r'z(\d+)x(\d+)y(\d+)', quadkey_id_expand)
            z = int(match.group(1))
            x = int(match.group(2))
            y = int(match.group(3))

            bounds = mercantile.bounds(x, y, z)    
            min_lat, min_lon = bounds.south, bounds.west
            max_lat, max_lon = bounds.north, bounds.east
            cell_polygon = Polygon([
                [min_lon, min_lat],  # Bottom-left corner
                [max_lon, min_lat],  # Bottom-right corner
                [max_lon, max_lat],  # Top-right corner
                [min_lon, max_lat],  # Top-left corner
                [min_lon, min_lat]   # Closing the polygon (same as the first point)
            ])
            
            if not cell_polygon.is_valid:
                continue
            
            center_lat, center_lon, cell_width, cell_height, cell_area = graticule_dggs_metrics(cell_polygon)
            
            cell_geom = QgsGeometry.fromWkt(cell_polygon.wkt)
            quadkey_feature = QgsFeature(fields)
            quadkey_feature.setGeometry(cell_geom)
            
            attributes = {
                "quadkey": quadkey_id_expand,
                "resolution": resolution,
                "center_lat": center_lat,
                "center_lon": center_lon,
                "cell_width": cell_width,
                "cell_height": cell_height,
                "cell_area": cell_area
            }
            quadkey_feature.setAttributes([attributes[field.name()] for field in fields])
            mem_provider.addFeatures([quadkey_feature])

        if feedback:
            feedback.setProgress(100)
            feedback.pushInfo("quadkey expansion completed.")
                
    return mem_layer
